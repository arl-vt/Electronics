/* %%%%%%%%%%%%  ADC - CCS DISPLAY  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * ------------Temp sensor on LaunchPAd - TM4C123
 * */
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/adc.h"
#include "driverlib/debug.h"


#define USER_LED  GPIO_PIN_1

int main(void)
 {
	// Array to store data read from ADC FIFO. Seq 1 of FIFO depth 4 is used.
	// Array size is same as that of sequencer
	uint32_t ADC0Value[4];

	// Variable for temperature calculation
	volatile uint32_t TempAvg;
	volatile uint32_t TempValueC;
	volatile uint32_t TempValueF;

    // Setup the system clock to run at 40 Mhz from PLL with crystal reference

    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|
                    SYSCTL_OSC_MAIN);

    // Enable and wait for the port to be ready for access
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF))
    {
    }
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, USER_LED);

    //Enable ADC
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    //Configure sequencer
    // use ADC0, sample sequencer 1, use processor to trigger the sequence, highest priority
    ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);

    //Configure individual functionality
    ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_TS);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_TS);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_TS);

    //Final step : sample temp sensor, configure interrupt flag to be set when sample is done, and its the last conversion
    ADCSequenceStepConfigure(ADC0_BASE,1,3,ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END);

    //Enable ADC sequencer 1
    ADCSequenceEnable(ADC0_BASE, 1);

    while(1)
    {
        ADCIntClear(ADC0_BASE, 1);

        // Trigger ADC conversion
        ADCProcessorTrigger(ADC0_BASE, 1);

        //wait for ADC conversion to complete
        while(!ADCIntStatus(ADC0_BASE, 1, false))
        {
        }

        ADCSequenceDataGet(ADC0_BASE, 1, ADC0Value);

        // calculate Average Temp
        TempAvg = (ADC0Value[0]+ADC0Value[1]+ADC0Value[2]+ADC0Value[3]+2)/4; //2 is added for rounding off

        TempValueC = (1475-((2475*TempAvg))/4096)/10;

        TempValueF = ((TempValueC*9)+160)/5;
    }
}
