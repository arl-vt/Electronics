/* %%%%%%%%%%%%  PWM OUTPUT  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * ------------Generate PWM output at PD0 on TM4C123
 * */

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"

// 55 HZ base frequency for Servo control
#define PWM_FREQUENCY 55
#define USER_LED  GPIO_PIN_1

int main(void){

	volatile uint32_t period = 1000;
	volatile uint32_t duty = 1000; // 75%
	volatile uint32_t ui32PWMClock;
	volatile uint8_t ui8Adjust;
	ui8Adjust = 83;

	// Run CPU at 40 MHz and divide clock by 1 for PWM module
	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
	SysCtlPWMClockSet(SYSCTL_PWMDIV_1); //Use default clock tied to the module

	// Enable modules
	SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

	//Unlock PF) for use as PWM output
	HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
	HWREG(GPIO_PORTF_BASE+GPIO_O_CR) |= 0x01;

	// Configure pins to be used as PWM
	GPIOPinConfigure(GPIO_PF0_M1PWM4); //ties one of the 4 outputs of PWM module 1 to PF0
//	GPIOPinConfigure(GPIO_PF1_M1PWM5);
//	GPIOPinConfigure(GPIO_PF2_M1PWM6);
//	GPIOPinConfigure(GPIO_PF3_M1PWM7);

	//Sets functionality of GPIO pin within the module
	//GPIOPinTypePWM(GPIO_PORTD_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
	GPIOPinTypePWM(GPIO_PORTD_BASE, GPIO_PIN_0);

    // Configure the GPIO port for the LED operation.
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);


	// Configuring PWM
	/* Configure PWM generator(creates pulses) on the module. PWM1_BASE is the base module used.
	 * GEN_2 is for pin 4,5 and GEN_# is for pin 6,7. MODE_DOWN create sawtooth wave while MODE_UP
	 * creates triangular waves. */
	PWMGenConfigure(PWM1_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN|PWM_GEN_MODE_NO_SYNC);
	//PWMGenConfigure(PWM1_BASE, PWM_GEN_3, PWM_GEN_MODE_DOWN|PWM_GEN_MODE_NO_SYNC);

	/* Set period of PWM output. EG period = 500 means 500 clock ticks.*/
	PWMGenPeriodSet(PWM1_BASE, PWM_GEN_2, period);
	PWMGenPeriodSet(PWM1_BASE, PWM_GEN_3, period);

	/* Set the duty cycle. PWM_OUT_4 is the pwm output number 4 which is attached to PF0 in this case */
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_4, duty);
//	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, duty);
//	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, duty);
//	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, duty);

	// Enable the PWM generator
	//PWMGenEnable(PWM1_BASE, PWM_GEN_2);
	//PWMGenEnable(PWM1_BASE, PWM_GEN_3);

	// Enable the PWM module - output of the physical pins on the controller
	//PWMOutputState(PWM1_BASE, (PWM_OUT_4_BIT|PWM_OUT_5_BIT|PWM_OUT_6_BIT|PWM_OUT_7_BIT), true);
	//PWMOutputState(PWM1_BASE, (PWM_OUT_4_BIT), true);

	while(1){
		GPIOPinWrite(GPIO_PORTF_BASE, USER_LED, USER_LED);

		        //
		        // Delay for a bit
		        //
		        SysCtlDelay(2000000);

		        //
		        // Turn on the LED
		        //
		        GPIOPinWrite(GPIO_PORTF_BASE, USER_LED, ~(USER_LED));

		        //
		        // Delay for a bit
		        //
		        SysCtlDelay(2000000);
	}

}
